// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: model.proto

package rbkpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Symbol with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Symbol) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Symbol with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SymbolMultiError, or nil if none found.
func (m *Symbol) ValidateAll() error {
	return m.validate(true)
}

func (m *Symbol) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for FutureType

	// no validation rules for Name

	// no validation rules for Base

	// no validation rules for Quote

	// no validation rules for Underlying

	// no validation rules for Contract

	// no validation rules for ContractVal

	// no validation rules for TickSize

	// no validation rules for StepSize

	// no validation rules for MaxQty

	// no validation rules for IsInverse

	// no validation rules for Trading

	// no validation rules for MaxLeverage

	// no validation rules for DeliveryAt

	// no validation rules for ListingAt

	if len(errors) > 0 {
		return SymbolMultiError(errors)
	}

	return nil
}

// SymbolMultiError is an error wrapping multiple validation errors returned by
// Symbol.ValidateAll() if the designated constraints aren't met.
type SymbolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SymbolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SymbolMultiError) AllErrors() []error { return m }

// SymbolValidationError is the validation error returned by Symbol.Validate if
// the designated constraints aren't met.
type SymbolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SymbolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SymbolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SymbolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SymbolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SymbolValidationError) ErrorName() string { return "SymbolValidationError" }

// Error satisfies the builtin error interface
func (e SymbolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSymbol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SymbolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SymbolValidationError{}

// Validate checks the field values on Ticker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ticker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ticker with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TickerMultiError, or nil if none found.
func (m *Ticker) ValidateAll() error {
	return m.validate(true)
}

func (m *Ticker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exchange

	// no validation rules for Symbol

	// no validation rules for Open

	// no validation rules for High

	// no validation rules for Low

	// no validation rules for Last

	// no validation rules for Ask

	// no validation rules for Bid

	// no validation rules for AskSize

	// no validation rules for BidSize

	// no validation rules for Volume

	// no validation rules for QuoteVolume

	// no validation rules for Time

	if len(errors) > 0 {
		return TickerMultiError(errors)
	}

	return nil
}

// TickerMultiError is an error wrapping multiple validation errors returned by
// Ticker.ValidateAll() if the designated constraints aren't met.
type TickerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TickerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TickerMultiError) AllErrors() []error { return m }

// TickerValidationError is the validation error returned by Ticker.Validate if
// the designated constraints aren't met.
type TickerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TickerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TickerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TickerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TickerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TickerValidationError) ErrorName() string { return "TickerValidationError" }

// Error satisfies the builtin error interface
func (e TickerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TickerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TickerValidationError{}

// Validate checks the field values on Candle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Candle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Candle with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CandleMultiError, or nil if none found.
func (m *Candle) ValidateAll() error {
	return m.validate(true)
}

func (m *Candle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exchange

	// no validation rules for Symbol

	// no validation rules for Period

	// no validation rules for Open

	// no validation rules for High

	// no validation rules for Low

	// no validation rules for Close

	// no validation rules for Volume

	// no validation rules for QuoteVolume

	// no validation rules for Count

	// no validation rules for Time

	if len(errors) > 0 {
		return CandleMultiError(errors)
	}

	return nil
}

// CandleMultiError is an error wrapping multiple validation errors returned by
// Candle.ValidateAll() if the designated constraints aren't met.
type CandleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CandleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CandleMultiError) AllErrors() []error { return m }

// CandleValidationError is the validation error returned by Candle.Validate if
// the designated constraints aren't met.
type CandleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CandleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CandleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CandleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CandleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CandleValidationError) ErrorName() string { return "CandleValidationError" }

// Error satisfies the builtin error interface
func (e CandleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCandle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CandleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CandleValidationError{}
