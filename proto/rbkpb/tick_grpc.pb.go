// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rkbpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TickServiceClient is the client API for TickService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickServiceClient interface {
	// 获取支持的交易所
	ListExchange(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExchangeResponse, error)
	// 获取交易所交易对
	ListSymbol(ctx context.Context, in *ListSymbolRequest, opts ...grpc.CallOption) (*ListSymbolResponse, error)
	// 订阅更新
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (TickService_SubscribeClient, error)
}

type tickServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTickServiceClient(cc grpc.ClientConnInterface) TickServiceClient {
	return &tickServiceClient{cc}
}

func (c *tickServiceClient) ListExchange(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExchangeResponse, error) {
	out := new(ExchangeResponse)
	err := c.cc.Invoke(ctx, "/rbkpb.TickService/ListExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickServiceClient) ListSymbol(ctx context.Context, in *ListSymbolRequest, opts ...grpc.CallOption) (*ListSymbolResponse, error) {
	out := new(ListSymbolResponse)
	err := c.cc.Invoke(ctx, "/rbkpb.TickService/ListSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickServiceClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (TickService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TickService_ServiceDesc.Streams[0], "/rbkpb.TickService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tickServiceSubscribeClient{stream}
	return x, nil
}

type TickService_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type tickServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *tickServiceSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tickServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TickServiceServer is the server API for TickService service.
// All implementations should embed UnimplementedTickServiceServer
// for forward compatibility
type TickServiceServer interface {
	// 获取支持的交易所
	ListExchange(context.Context, *emptypb.Empty) (*ExchangeResponse, error)
	// 获取交易所交易对
	ListSymbol(context.Context, *ListSymbolRequest) (*ListSymbolResponse, error)
	// 订阅更新
	Subscribe(TickService_SubscribeServer) error
}

// UnimplementedTickServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTickServiceServer struct {
}

func (UnimplementedTickServiceServer) ListExchange(context.Context, *emptypb.Empty) (*ExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchange not implemented")
}
func (UnimplementedTickServiceServer) ListSymbol(context.Context, *ListSymbolRequest) (*ListSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbol not implemented")
}
func (UnimplementedTickServiceServer) Subscribe(TickService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

// UnsafeTickServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickServiceServer will
// result in compilation errors.
type UnsafeTickServiceServer interface {
	mustEmbedUnimplementedTickServiceServer()
}

func RegisterTickServiceServer(s grpc.ServiceRegistrar, srv TickServiceServer) {
	s.RegisterService(&TickService_ServiceDesc, srv)
}

func _TickService_ListExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickServiceServer).ListExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbkpb.TickService/ListExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickServiceServer).ListExchange(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickService_ListSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickServiceServer).ListSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbkpb.TickService/ListSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickServiceServer).ListSymbol(ctx, req.(*ListSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TickServiceServer).Subscribe(&tickServiceSubscribeServer{stream})
}

type TickService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type tickServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *tickServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tickServiceSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TickService_ServiceDesc is the grpc.ServiceDesc for TickService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rbkpb.TickService",
	HandlerType: (*TickServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListExchange",
			Handler:    _TickService_ListExchange_Handler,
		},
		{
			MethodName: "ListSymbol",
			Handler:    _TickService_ListSymbol_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _TickService_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tick.proto",
}
